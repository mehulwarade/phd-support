###############################################
INTEL NUC 
    1TB SSD
    32 GB RAM
    I7 Intel Octa Core CPU

User Password
    root mcs
    mehul z

NUC IP: 192.168.5.10
    User: mehul
    Password: z

Switch 1 IP: 192.168.5.9 
    Password: Netgear1

Router Login:
    name: optus
    password: mcs
    IP: 192.168.5.1
    SSID: cluster_5GH/ cluster
###############################################

## Tips

** Enable sudo 
 
        By default sudo is not installed on Debian, but you can install it. First enable su-mode:
            su -

        Install sudo by running:
            apt-get install sudo

        After that you would need to play around with users and permissions. Give sudo right to your own user. 
            usermod -aG sudo yourusername

        Make sure your sudoers file have sudo group added. Run:
        visudo to modify sudoers file and add following line into it (if it is missing): 

        # Allow members of group sudo to execute any command
        %sudo   ALL=(ALL:ALL) ALL
        You need to relogin or reboot device completely for changes to take effect.

** Enabling passwordless ssh
 
        1. Create key - ssh-keygen
            Save the key with no password somewhere safe
        
        2. Copy the key to the node
            ssh-copy-id -i sshkey mehul@192.168.0.19
                or if saved in some other place
            ssh-copy-id -i /Users/mwarade/Desktop/$location/key nodeaddress
        
        3. SSH using the key
            ssh -i sshkey mehul@192.168.0.19
            ssh -i key node


** SSH by just the hostname (No need for user)
 
    nano ~/.ssh/config
        Host NameToSSHInto
            User UsernameToSSHAs
            Hostname IPAddress/DNS

** Creating and unzipping tar files:

    Create: tar -czvf name-of-archive.tar.gz /path/to/directory-or-file

        -c: Create an archive.
        -z: Compress the archive with gzip.
        -v: Display progress in the terminal while creating the archive, also known as “verbose” mode. The v is always optional in these commands, but it’s helpful.
        -f: Allows you to specify the filename of the archive.

    Unzip: tar -xzvf archive.tar.gz

** Remotely running a command

    ssh -t user@remote-host "command"

    Eg: ssh -t 192.168.5.103 "sudo condor_master"



## Setup


** Installing HTcondor

    REF:https://htcondor.readthedocs.io/en/latest/getting-htcondor/install-linux-as-user.html
    Source Tarball Link: https://research.cs.wisc.edu/htcondor/tarball/
    Tested with: https://research.cs.wisc.edu/htcondor/tarball/current/current/condor-x86_64_Debian10-stripped.tar.gz

    ** curl https://research.cs.wisc.edu/htcondor/tarball/current/current/condor-x86_64_Debian10-stripped.tar.gz --output condor

    1. After downloding, unpack the tat.gz file:
        tar -x -f file_name.tar.gz

    2. Rename the long folder to a shorter version:
        mv condor-*stripped condor

    3. Configure condor:
        cd condor
        ./bin/make-personal-from-tarball

    4. Source the condor /bin folder
        . /path-to-condor/condor.sh

    5. Test installation:
        condor_q
        condor_status

    6. All the logs and configuration files are stored in the same folder.
        Config: condor_config_val -config
        Log:   condor_folder/local/Log

    7. condor useful commands:
        condor_q
        condor_q -analyze
        condor_status
        condor_config_val -config
        condor_submit_dag xxx
        pstree | grep condor

** Installing Pegasus
    
    REF: https://pegasus.isi.edu/documentation/user-guide/installation.html
    Source Tarball Link (Get Debian 11 tar.gz package): https://pegasus.isi.edu/downloads/
    Download Link for Debian 11 tarball: http://download.pegasus.isi.edu/pegasus/5.0.1/pegasus-binary-5.0.1-x86_64_deb_11.tar.gz 
    Tested with the above link.

    ** curl http://download.pegasus.isi.edu/pegasus/5.0.1/pegasus-binary-5.0.1-x86_64_deb_11.tar.gz --output pegasus.tar.gz

    1. After downloading, unpack the file:
        tar zxf filename.tar.gz

    2. Install predependencies:
        sudo apt install python3-git
        sudo apt install python3-yaml

    2. Adding to path:
        export PATH=/path/to/pegasus-install/bin:$PATH

    3. Check that pegasus works:
        pegasus-config -V
        pegasus-config --bin

    4. If generating a workflow, we need to set the libraris:
        export PYTHONPATH=`pegasus-config --python`
        export PERL5LIB=`pegasus-config --perl`
        export CLASSPATH=`pegasus-config --classpath`

** Sourcing all the important foders:
    export CONDOR_CONFIG=/home/mehul/source_folder/condor_source/etc/condor_config
    export PATH=/home/mehul/source_folder/condor_source/bin:$PATH
    export PATH=/home/mehul/source_folder/condor_source/sbin:$PATH
    export PATH=/home/mehul/source_folder/pegasus_source/bin:$PATH
    export PATH=/home/mehul/source_folder/x86-montage-binaries:$PATH

** Installing Montage pre-req:
    
    Installing pip3:
        sudo apt install python3-pip

    1. Astropy: pip3 install astropy

    2. Montage binaries: extract and source them.

    3. ./montage-workflow.py --center "56.7 24.0" --degrees 0.5 --band dss:DSS2B:blue --band dss:DSS2R:green --band dss:DSS2IR:red


** Netboot

    1. sudo apt install tcpdump
        sudo tcpdump -i enp89s0 port bootpc

    2. sudo apt install dnsmasq
        sudo mv /etc/dnsmasq.conf /etc/dnsmasq.conf.old

    # REF: https://github.com/musukvl/raspberry-pi-wifi-router-config/blob/master/dnsmasq.conf
    # REF: https://www.linux.org/docs/man8/dnsmasq.html

    3. sudo nano /etc/dnsmasq.conf <= Copy following content or copy the dnsmasq.conf file from /boot/user_custom_files to /etc/dnsmasq.conf
        
        #
        #/etc/dnsmasq.conf
        #

        port=0
        #dhcp-range=192.168.50.255,proxy
        dhcp-range=eth0, 192.168.5.11, 192.168.5.100, 24h

        #STATIC IP ADDRESS TO EACH UNIQUE MAC
        dhcp-host=b8:27:eb:d1:40:83,master,192.168.50.220
        #dhcp-host=b8:27:eb:07:8e:98,slave1,192.168.50.210

        #dhcp-script=/nfs/dnsmasq.conf.save.hosts.auto.sh

        log-dhcp
        enable-tftp
        tftp-root=/tftpboot
        #tftp-unique-root=mac
        pxe-service=0,"Raspberry Pi Boot"

    4. sudo systemctl restart dnsmasq

    5. sudo tail -F /var/log/daemon.log

    6. 

    7.

    8. No internet on the node:
        [ ISSUE SOLVED ]: No internet on individual nodes: 
        Need to add the default gateway by running following commands. If 'route' command does not exist install using "sudo apt install net-tools"

        sudo ip route del 0/0 dev eth0 &> /dev/null
        a=`route | awk "/${wlan}/"'{print $5+1;exit}'`
        sudo route add -net default gw 192.168.5.1 netmask 0.0.0.0 dev eth0 metric $a
                                        √ your router

        [WORKS] sudo route add -net default gw 192.168.5.1 netmask 0.0.0.0 dev eth0

        

## Error

** sudo: /usr/bin/sudo must be owned by uid 0 and have the setuid bit set
    
    1. Login as root
    
    chown 0:0 /usr/bin/sudo && chmod 4755 /usr/bin/sudo
    chown 0:0 /usr/lib/sudo/sudoers.so
    chown 0:0 /etc/sudoers
    chown 0:0 /etc/sudoers.d/*
    chown 0:0 /var/lib/sudo/*

    REF: https://askubuntu.com/a/471503

** tftpboot Error

    the tftpboot names should be seperated by dash not colon
    dc:a6:32:c1:a8:02 no
    dc-a6-32-c1-a8-02 yes


** MasterLog : error opening watchdog pipe /var/run/condor/procd_pipe.watchdog: No such file or directory :

    sudo mkdir -p /run/condor && sudo chown condor:condor /run/condor
    sudo mkdir -p /var/run/condor && sudo chown condor:condor /var/run/condor


192.168.5.10:/home/mehul/tftpboot/dc-a6-32-c1-a8-02 /boot nfs defaults,vers=4.1,proto=tcp 0 0

192.168.5.10:/home/mehul/shared_fs /home/mehul/shared_fs nfs rw,hard,intr,rsize=8192,wsize=8192,timeo=14 0 0

echo | sudo tee /etc/dnsmasq.conf

sudo mount 192.168.5.10:/home/mehul/shared_fs /home/mehul/shared_fs
exit 0

** Commands:
    sudo systemctl status nfs-server.service
    sudo systemctl status dnsmasq

    sudo systemctl restart dnsmasq
    sudo systemctl restart nfs-server.service

    sudo tcpdump -i enp89s0 port bootpc

    sudo tail -F /var/log/daemon.log

    sudo nano /etc/dnsmasq.conf
    
    sudo nano /etc/ethers

** Node info:
    Node    MAC                     TFTPBOOT          IP
    Master  1c:69:7a:a7:61:a8       Intel NUC         192.168.5.10
    Switch  80:CC:9C:9B:42:DF
    1       dc:a6:32:c1:a8:02       dc-a6-32-c1-a8-02 192.168.5.101
    2       dc:a6:32:af:b6:97       dc-a6-32-af-b6-97 192.168.5.102
    3       dc:a6:32:c1:a7:7a       dc-a6-32-c1-a7-7a 192.168.5.103
    4       dc:a6:32:c1:a8:73       dc-a6-32-c1-a8-73 192.168.5.104
    5       dc:a6:32:c1:a8:07       dc-a6-32-c1-a8-07 192.168.5.105
    6       dc:a6:32:c1:a8:1f       dc-a6-32-c1-a8-1f 192.168.5.106
    7       dc:a6:32:c1:a8:4c       dc-a6-32-c1-a8-4c 192.168.5.107
    8       dc:a6:32:c1:a8:1c       dc-a6-32-c1-a8-1c 192.168.5.108
    9       dc:a6:32:c1:a8:3a       dc-a6-32-c1-a8-3a 192.168.5.109
    10      dc:a6:32:c1:a8:28       dc-a6-32-c1-a8-28 192.168.5.110
    11      dc:a6:32:af:b6:b7       dc-a6-32-af-b6-b7 192.168.5.111
    12      dc:a6:32:af:b4:6c       dc-a6-32-af-b4-6c 192.168.5.112
    13      dc:a6:32:c1:a7:e3       dc-a6-32-c1-a7-e3 192.168.5.113
    14      dc:a6:32:c1:a8:ee       dc-a6-32-c1-a8-ee 192.168.5.114
    15      dc:a6:32:c1:a8:29       dc-a6-32-c1-a8-29 192.168.5.115
    16      dc:a6:32:c1:a8:0d       dc-a6-32-c1-a8-0d 192.168.5.116
    17      dc:a6:32:c1:a7:59       dc-a6-32-c1-a7-59 192.168.5.117
    18      dc:a6:32:c1:a7:56       dc-a6-32-c1-a7-56 192.168.5.118
    19      dc:a6:32:c1:a8:9a       dc-a6-32-c1-a8-9a 192.168.5.119
    20      dc:a6:32:c1:a8:32       dc-a6-32-c1-a8-32 192.168.5.120

/etc/ethers

dc-a6-32-c1-a8-02 192.168.5.101
dc-a6-32-af-b6-97 192.168.5.102
dc-a6-32-c1-a7-7a 192.168.5.103
dc-a6-32-c1-a8-73 192.168.5.104
dc-a6-32-c1-a8-07 192.168.5.105
dc-a6-32-c1-a8-1f 192.168.5.106
dc-a6-32-c1-a8-4c 192.168.5.107
dc-a6-32-c1-a8-1c 192.168.5.108
dc-a6-32-c1-a8-3a 192.168.5.109
dc-a6-32-c1-a8-28 192.168.5.110
dc-a6-32-af-b6-b7 192.168.5.111
dc-a6-32-af-b4-6c 192.168.5.112
dc-a6-32-c1-a7-e3 192.168.5.113
dc-a6-32-c1-a8-ee 192.168.5.114
dc-a6-32-c1-a8-29 192.168.5.115
dc-a6-32-c1-a8-0d 192.168.5.116
dc-a6-32-c1-a7-59 192.168.5.117
dc-a6-32-c1-a7-56 192.168.5.118
dc-a6-32-c1-a8-9a 192.168.5.119
dc-a6-32-c1-a8-32 192.168.5.120


######################################################
/etc/condor/condor_config.local -> file
######################################################

######## MAIN ##############

DAEMON_LIST = MASTER, STARTD
CONDOR_HOST = 192.168.5.1
ALLOW_WRITE = $(CONDOR_HOST) $(IP_ADDRESS) 127.* 192.168.5.*

######## FULL ##############

# HTCondor configuration file
#
# Configuration placed into this file extends/overwrites the settings in the
# main HTCondor configuration at /etc/condor/condor_config.
# It may be advantagous to leave the main configuration file pristine and put
# local configuration here to ease configuration updates during upgrades of the
# HTCondor Debian package. Alternatively, it is also possible to place additional
# configuration files into /etc/condor/config.d that will take precedence over
# both the main configuration file and this local configuration. Note that
# DebConf-generated configuration will overwrite settings in this file.

DAEMON_LIST = MASTER, STARTD
#DAEMON_LIST = COLLECTOR, MASTER, NEGOTIATOR, SCHEDD

CONDOR_HOST = 192.168.5.1

#ALLOW_READ = $(CONDOR_HOST) $(IP_ADDRESS) 127.* 192.168.1.*

ALLOW_WRITE = $(CONDOR_HOST) $(IP_ADDRESS) 127.* 192.168.5.*

#ALLOW_NEGOTIATOR = $(CONDOR_HOST) $(IP_ADDRESS) 127.* 192.168.1.*

#ALLOW_NEGOTIATOR_SCHEDD = 192.168.1.*

#ALLOW_ADMINISTRATOR = $(IP_ADDRESS)
#ALLOW_ADMINISTRATOR = $(CONDOR_HOST) $(IP_ADDRESS)

#https://www-auth.cs.wisc.edu/lists/htcondor-users/2014-March/msg00013.shtml
#SLOT1_USER = mehul
#SLOT2_USER = mehul
#SLOT3_USER = mehul
#SLOT4_USER = mehul

#STARTER_ALLOW_RUNAS_OWNER = False

#EXECUTE = /home/mehul/condor_test

#doesn't work≈
#SCHEDD.ALLOW_READ = condor
#SCHEDD.ALLOW_WRITE = condor

#NUM_SLOTS = 0



######################################################
            Netgear switch CLI
######################################################

# REF: https://community.netgear.com/t5/Smart-Plus-and-Smart-Pro-Managed/GS752TPv2-Howto-enable-disable-POE-via-SNMP/m-p/2122604

Port 24 POE off:
snmpset -t 10 -v 2c -c custom 192.168.1.1 iso.3.6.1.2.1.105.1.1.1.3.1.24 i 2
Port 24 POE on:
snmpset -t 10 -v 2c -c custom 192.168.1.1 iso.3.6.1.2.1.105.1.1.1.3.1.24 i 1

Port 36 off:
snmpset -t 10 -v 2c -c custom 192.168.1.1 iso.3.6.1.2.1.2.2.1.7.36 i 2
Port 36 on:
snmpset -t 10 -v 2c -c custom 192.168.1.1 iso.3.6.1.2.1.2.2.1.7.36 i 1


EX: ON: snmpset -t 10 -v 2c -c linux_wt 192.168.5.9 iso.3.6.1.2.1.105.1.1.1.3.1.1 i 1



######################################################
            Starting from new. Everything turned off
######################################################

Turn on the Sagecom router.
    Sagecom router setting:
        Static IP for Intel nuc: 1c:69:7a:a7:61:a8 : 192.168.5.10
        Static for Netgear Switch: 192.168.5.9
    
Turn on Netgear Switch.
    Netgear Switch should take the static IP, or
    Login and set static IP: 192.168.5.9
    Set SNMP access to Intel NUC IP to read and write.
    Password: Netgear1

Turn on Intel NUC:
    Should take IP address: 192.168.5.10


######################################################
        RPi4 Edit Bootloader for Network Boot
######################################################

REF: https://linuxhit.com/raspberry-pi-pxe-boot-netbooting-a-pi-4-without-an-sd-card/#6-assumptions
REF: https://www.raspberrypi.com/documentation/computers/raspberry-pi.html

    sudo apt-get update
    sudo apt-get full-upgrade
    sudo apt-get install rpi-eeprom
    vcgencmd bootloader_config

        ERROR:  VCHI initialization failed
        REF: https://chewett.co.uk/blog/258/vchi-initialization-failed-raspberry-pi-fixed/

        sudo usermod -aG video <username>
        EG: sudo usermod -aG video mehul

        Logout of the current terminal and log back in
        The command should work now.

# Enter root so no permission issue
    su
    cd /lib/firmware/raspberrypi/bootloader/beta/

# Make a copy of the latest firmware image file. In my case it was pieeprom-2019-11-18.bin:
    cp pieeprom-2021-11-18.bin new-pieeprom.bin

# Extract the config from the eeprom image
    rpi-eeprom-config new-pieeprom.bin > bootconf.txt

# Adding BOOT order at the end of the file
    nano bootconf.txt
    >>>>>>>>>>>>>>>>>>>
        BOOT_UART=0
        .
        .
        BOOT_ORDER=0x2
    >>>>>>>>>>>>>>>>>>>

# Now save the new bootconf.txt file to the firmware image we copied earlier:
    rpi-eeprom-config --out netboot-pieeprom.bin --config bootconf.txt new-pieeprom.bin

# Now install the new boot loader:
    rpi-eeprom-update -d -f ./netboot-pieeprom.bin

# Reboot and check using the vcgencmd
    vcgencmd bootloader_config

cd /lib/firmware/raspberrypi/bootloader/beta/
rpi-eeprom-update -d -f ./netboot-pieeprom.bin


######################################################
    Passing the password through CLI for sudo
######################################################

echo <Password> | sudo -S <Command>

eg.: echo mcs | sudo -S cho a

